require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Fellow::StreamsController, type: :controller do
  before(:each) do
      @user = FactoryBot.create(:fellow)
      sign_in @user
  end
  # This should return the minimal set of attributes required to create a valid
  # Stream. As you add validations to Fellow::Stream, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {stream: FactoryBot.create(:stream, lens_shifter: @user).to_param}
  }

  let(:invalid_attributes) {
    {stream: { title: ''}}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Fellow::StreamsController. Be sure to keep this updated too.
  # let(:valid_session) { {} }



  describe "GET #index" do
    it "returns a success response" do
      
      get :index
      expect(response).to be_success
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new
      expect(response).to be_success
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      stream = FactoryBot.create(:stream)
      get :edit, params: {id: stream.to_param}
      expect(response).to be_success
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Stream" do
        expect {
          post :create, params: {stream: valid_attributes}
        }.to change(Stream, :count).by(1)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: {stream: invalid_attributes}
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PUT #update" do
    before(:each) do
      @stream = FactoryBot.create(:stream, lens_shifter: @user)
    end

    context "with valid params" do

      it "updates the requested fellow_stream" do
        put :update, params: {format: 'json', id: @stream.id, stream: {title: 'Stream Updated', description: 'Updated description'}}
        json = JSON.parse(response.body)
        expect(json['title']).to eq('Stream Updated')
      end
    end

    context "with invalid params" do
      it "should properly validate title" do
        
        put :update, params: {format: 'json', id: @stream.id, stream: {title: ''}}
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE #destroy" do
    before(:each) do
      @stream = FactoryBot.create(:stream)
    end

    it "destroys the requested fellow_stream" do
      
      expect {
        delete :destroy, params: {id: @stream.to_param}
      }.to change(Stream, :count).by(-1)
    end

    it "redirects to the fellow_streams list" do
      
      delete :destroy, params: {id: @stream.to_param}
      expect(response).to redirect_to(fellow_streams_url)
    end
  end

end
